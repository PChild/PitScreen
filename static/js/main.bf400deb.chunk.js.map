{"version":3,"sources":["AppContext.js","SettingsPage.js","MenuBar.js","TwitchPage.js","AwardsSlides.js","RobotSlides.js","CadViewer.js","LogoPage.js","App.js","theme.js","index.js"],"names":["AppContext","React","createContext","tba","TBA","useStyles","makeStyles","theme","gridPad","paddingTop","spacing","justifyContent","urlSizing","width","minWidth","maxWidth","SettingsPage","classes","settingsContext","useContext","useState","eventCode","setEventCode","onChangeDebounced","debounce","e","Event","target","value","then","frcEvent","setEventChannel","webcasts","channel","Grid","container","className","item","InputLabel","shrink","name","defaultValue","label","disablePlainColor","accentColor","onChange","color","console","log","palette","background","default","setAccentColor","basicSizing","primaryColor","setPrimaryColor","TextField","InputLabelProps","type","event","setTeamNumber","fullWidth","outreachUrl","setOutreachUrl","robotUrl","setRobotUrl","logoUrl","setLogoUrl","list","MenuBar","menuContext","pageTitles","pageIcons","drawerVis","setDrawer","AppBar","position","Toolbar","IconButton","onClick","Drawer","anchor","open","onClose","List","ListItem","ListItemText","primary","Typography","variant","Divider","map","text","index","selected","currentPage","pageName","setCurrentPage","button","ListItemIcon","noWrap","TwitchPage","twitchContext","id","allowFullscreen","eventChannel","fontSize","height","withChat","autoplay","muted","AwardsSlides","slidesLink","slideDuration","showControls","loop","RobotSlides","slidesContext","auto-rotate","camera-controls","exposure","interaction-prompt","shadow-intensity","src","style","LogoPage","imgContext","maxHeight","display","alignItems","alignContent","paddingBottom","margin","icon","marginRight","main","flexDirection","overflow","slide","flex","contentPage","App","teamNumber","appSettings","Provider","createMuiTheme","secondary","error","red","A400","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.bf400deb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nexport default AppContext;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { ColorPicker } from \"material-ui-color\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppContext from \"./AppContext\";\r\nimport * as TBA from \"tba-api-client\";\r\nimport debounce from \"lodash.debounce\";\r\n\r\nconst tba = new TBA.API(\"u8L8Gd05IPCUmwjradkV0NbM7Y5Z7hx1fQc0SPx4vj6oPqKFCNGDiwZmlAhJ6SO8\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    gridPad: {\r\n        paddingTop: theme.spacing(4),\r\n        justifyContent: \"space-evenly\",\r\n    },\r\n\r\n    urlSizing: {\r\n        width: \"100%\",\r\n        minWidth: \"300px\",\r\n        maxWidth: \"460px\",\r\n    },\r\n}));\r\n\r\nexport default function SettingsPage() {\r\n    const classes = useStyles();\r\n    const settingsContext = useContext(AppContext);\r\n    const [eventCode, setEventCode] = useState(settingsContext.eventCode);\r\n\r\n    const onChangeDebounced = debounce((e) => {\r\n        tba.Event(e.target.value).then((frcEvent) => {\r\n            settingsContext.setEventCode(e.target.value);\r\n            settingsContext.setEventChannel(frcEvent.webcasts[0].channel);\r\n        });\r\n    }, 2000);\r\n\r\n    const handleInputChange = (e) => {\r\n        setEventCode(e.target.value), onChangeDebounced(e);\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={1} className={classes.gridPad}>\r\n            <Grid item>\r\n                <InputLabel shrink={true}>Background Color</InputLabel>\r\n                <ColorPicker\r\n                    name=\"accentColor\"\r\n                    defaultValue=\"#fff\"\r\n                    label=\"Accent\"\r\n                    disablePlainColor\r\n                    value={settingsContext.accentColor}\r\n                    onChange={(color) => {\r\n                        console.log(theme.palette.background.default);\r\n                        settingsContext.setAccentColor(color);\r\n                    }}\r\n                />\r\n            </Grid>\r\n            <Grid item className={classes.basicSizing}>\r\n                <InputLabel shrink={true}>Primary Color</InputLabel>\r\n                <ColorPicker\r\n                    name=\"primaryColor\"\r\n                    defaultValue=\"#d35401\"\r\n                    label=\"Primary\"\r\n                    value={settingsContext.primaryColor}\r\n                    onChange={(color) => {\r\n                        settingsContext.setPrimaryColor(color);\r\n                    }}\r\n                />\r\n            </Grid>\r\n            <Grid item className={classes.basicSizing}>\r\n                <TextField\r\n                    label=\"Event Code\"\r\n                    InputLabelProps={{ shrink: true }}\r\n                    onChange={handleInputChange}\r\n                    value={eventCode}\r\n                ></TextField>\r\n            </Grid>\r\n            <Grid item className={classes.basicSizing}>\r\n                <TextField\r\n                    label=\"Team Number\"\r\n                    type=\"number\"\r\n                    onChange={(event) => {\r\n                        settingsContext.setTeamNumber(event.value);\r\n                    }}\r\n                ></TextField>\r\n            </Grid>\r\n            <Grid item className={classes.urlSizing}>\r\n                <TextField\r\n                    fullWidth\r\n                    InputLabelProps={{ shrink: true }}\r\n                    label=\"Awards Slideshow URL\"\r\n                    type=\"url\"\r\n                    value={settingsContext.outreachUrl}\r\n                    onChange={(event) => {\r\n                        settingsContext.setOutreachUrl(event.value);\r\n                    }}\r\n                ></TextField>\r\n            </Grid>\r\n            <Grid item className={classes.urlSizing}>\r\n                <TextField\r\n                    fullWidth\r\n                    InputLabelProps={{ shrink: true }}\r\n                    label=\"Robot Slideshow URL\"\r\n                    type=\"url\"\r\n                    value={settingsContext.robotUrl}\r\n                    onChange={(event) => {\r\n                        settingsContext.setRobotUrl(event.value);\r\n                    }}\r\n                ></TextField>\r\n            </Grid>\r\n            <Grid item className={classes.urlSizing}>\r\n                <TextField\r\n                    fullWidth\r\n                    InputLabelProps={{ shrink: true }}\r\n                    label=\"Team Logo URL\"\r\n                    type=\"url\"\r\n                    value={settingsContext.logoUrl}\r\n                    onChange={(event) => {\r\n                        settingsContext.setLogoUrl(event.target.value);\r\n                    }}\r\n                ></TextField>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport EmojiPeopleIcon from \"@material-ui/icons/EmojiPeople\";\r\nimport FormatListNumberedIcon from \"@material-ui/icons/FormatListNumbered\";\r\nimport BuildIcon from \"@material-ui/icons/Build\";\r\nimport VideocamIcon from \"@material-ui/icons/Videocam\";\r\nimport PanoramaIcon from \"@material-ui/icons/Panorama\";\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\r\nimport PageviewIcon from \"@material-ui/icons/Pageview\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppContext from \"./AppContext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    list: {\r\n        width: 300,\r\n    },\r\n}));\r\n\r\nexport default function MenuBar() {\r\n    const menuContext = useContext(AppContext);\r\n    const classes = useStyles();\r\n    const pages = [\"settings\", \"prematch\", \"schedule\", \"outreach\", \"robot\", \"stream\", \"logo\", \"cad\"];\r\n    const pageTitles = [\r\n        \"Settings\",\r\n        \"Match Preview\",\r\n        \"Match Schedule\",\r\n        \"Outreach Slides\",\r\n        \"Robot Slides\",\r\n        \"Event Stream\",\r\n        \"Logo Screen\",\r\n        \"CAD\",\r\n    ];\r\n    const pageIcons = [\r\n        <SettingsIcon />,\r\n        <AssignmentIcon />,\r\n        <FormatListNumberedIcon />,\r\n        <EmojiPeopleIcon />,\r\n        <BuildIcon />,\r\n        <VideocamIcon />,\r\n        <PanoramaIcon />,\r\n        <PageviewIcon />,\r\n    ];\r\n\r\n    const [drawerVis, setDrawer] = useState(false);\r\n\r\n    const changePage = (pageName) => {\r\n        setDrawer(false);\r\n        menuContext.setCurrentPage(pageName);\r\n    };\r\n\r\n    return (\r\n        <AppBar position=\"relative\">\r\n            <Toolbar>\r\n                <IconButton onClick={() => setDrawer(true)}>\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Drawer anchor=\"left\" open={drawerVis} onClose={() => setDrawer(false)}>\r\n                    <List className={classes.list}>\r\n                        <ListItem>\r\n                            <ListItemText primary={<Typography variant=\"h5\">PitScreen</Typography>} />\r\n                        </ListItem>\r\n                        <Divider />\r\n                        {pages.map((text, index) => (\r\n                            <div key={text}>\r\n                                <ListItem\r\n                                    selected={menuContext.currentPage == text}\r\n                                    onClick={() => changePage(text)}\r\n                                    button\r\n                                >\r\n                                    <ListItemIcon>{pageIcons[index]}</ListItemIcon>\r\n                                    <ListItemText primary={pageTitles[index]} />\r\n                                </ListItem>\r\n                                <Divider />\r\n                            </div>\r\n                        ))}\r\n                    </List>\r\n                </Drawer>\r\n\r\n                <Typography variant=\"h5\" color=\"inherit\" noWrap>\r\n                    PitScreen\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { TwitchEmbed } from \"react-twitch-embed\";\r\nimport AppContext from \"./AppContext\";\r\n\r\nexport default function TwitchPage() {\r\n    const twitchContext = useContext(AppContext);\r\n    return (\r\n        <TwitchEmbed\r\n            id=\"player\"\r\n            allowFullscreen={false}\r\n            channel={twitchContext.eventChannel}\r\n            fontSize=\"small\"\r\n            height=\"100%\"\r\n            withChat={false}\r\n            theme=\"light\"\r\n            width=\"100%\"\r\n            autoplay={true}\r\n            muted={true}\r\n        />\r\n    );\r\n}\r\n","import ReactGoogleSlides from \"react-google-slides\";\r\n\r\nexport default function AwardsSlides() {\r\n    return (\r\n        <ReactGoogleSlides\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            slidesLink=\"https://docs.google.com/presentation/d/172oFC8-LBw0GQEymFDbTBn-ORh7wi2ByfUXrXm7H-AM\"\r\n            slideDuration={5}\r\n            showControls\r\n            loop\r\n        />\r\n    );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport ReactGoogleSlides from \"react-google-slides\";\r\nimport AppContext from \"./AppContext\";\r\n\r\nexport default function RobotSlides() {\r\n    const slidesContext = useContext(AppContext);\r\n\r\n    return (\r\n        <ReactGoogleSlides\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            slidesLink={slidesContext.robotUrl}\r\n            slideDuration={5}\r\n            showControls\r\n            loop\r\n        />\r\n    );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport \"@google/model-viewer\";\r\nimport AppContext from \"./AppContext\";\r\n\r\nexport default function RobotSlides() {\r\n    const cadContext = useContext(AppContext);\r\n    return (\r\n        <model-viewer\r\n            autoplay\r\n            auto-rotate\r\n            camera-controls\r\n            exposure=\"0.25\"\r\n            interaction-prompt=\"none\"\r\n            shadow-intensity=\"1\"\r\n            src=\"./Intake.gltf\"\r\n            style={{ width: \"100%\", height: \"100%\" }}\r\n        ></model-viewer>\r\n    );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"./AppContext\";\r\n\r\nexport default function LogoPage() {\r\n    const imgContext = useContext(AppContext);\r\n    return (\r\n        <div\r\n            style={{\r\n                maxWidth: \"100%\",\r\n                maxHeight: \"100%\",\r\n                height: \"calc(100% - 64px)\",\r\n                width: \"100vw\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                alignContent: \"center\",\r\n                paddingBottom: \"1em\",\r\n                paddingTop: \"1em\",\r\n                margin: \"0\",\r\n            }}\r\n        >\r\n            <img\r\n                src={imgContext.logoUrl}\r\n                style={{\r\n                    maxWidth: \"100%\",\r\n                    maxHeight: \"100%\",\r\n                    height: \"auto\",\r\n                    width: \"auto\",\r\n                }}\r\n            ></img>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nimport AppContext from \"./AppContext\";\r\nimport SettingsPage from \"./SettingsPage\";\r\nimport MenuBar from \"./MenuBar\";\r\nimport TwitchPage from \"./TwitchPage\";\r\nimport AwardsSlides from \"./AwardsSlides\";\r\nimport RobotSlides from \"./RobotSlides\";\r\nimport CadViewer from \"./CadViewer\";\r\nimport LogoPage from \"./LogoPage\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    icon: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    main: {\r\n        paddingTop: theme.spacing(0),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        height: \"100vh\",\r\n        alignItems: \"flex-start\",\r\n        alignContent: \"flex-start\",\r\n        justifyContent: \"flex-start\",\r\n        overflow: \"hidden\",\r\n    },\r\n\r\n    slide: {\r\n        flex: 1,\r\n    },\r\n\r\n    contentPage: {\r\n        display: \"flex\",\r\n        width: \"100vw\",\r\n        height: \"100%\",\r\n    },\r\n}));\r\n\r\nexport default function App() {\r\n    const classes = useStyles();\r\n\r\n    const [currentPage, setCurrentPage] = useState(\"settings\");\r\n    const [outreachUrl, setOutreachUrl] = useState(\r\n        \"https://docs.google.com/presentation/d/172oFC8-LBw0GQEymFDbTBn-ORh7wi2ByfUXrXm7H-AM\"\r\n    );\r\n    const [robotUrl, setRobotUrl] = useState(\r\n        \"https://docs.google.com/presentation/d/172oFC8-LBw0GQEymFDbTBn-ORh7wi2ByfUXrXm7H-AM\"\r\n    );\r\n    const [logoUrl, setLogoUrl] = useState(\"https://raw.githubusercontent.com/team401/resources/master/Team/Final.png\");\r\n    const [teamNumber, setTeamNumber] = useState(401);\r\n    const [eventCode, setEventCode] = useState(\"2019chcmp\");\r\n    const [eventChannel, setEventChannel] = useState(\"firstchesapeake2blue\");\r\n    const [primaryColor, setPrimaryColor] = useState(\"#d35401\");\r\n    const [accentColor, setAccentColor] = useState(\"#fff\");\r\n\r\n    const appSettings = {\r\n        currentPage: currentPage,\r\n        outreachUrl: outreachUrl,\r\n        robotUrl: robotUrl,\r\n        logoUrl: logoUrl,\r\n        teamNumber: teamNumber,\r\n        eventCode: eventCode,\r\n        eventChannel: eventChannel,\r\n        primaryColor: primaryColor,\r\n        accentColor: accentColor,\r\n        setCurrentPage,\r\n        setOutreachUrl,\r\n        setRobotUrl,\r\n        setLogoUrl,\r\n        setTeamNumber,\r\n        setEventCode,\r\n        setEventChannel,\r\n        setPrimaryColor,\r\n        setAccentColor,\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider value={appSettings}>\r\n            <main className={classes.main}>\r\n                <MenuBar />\r\n                {currentPage == \"settings\" && <SettingsPage />}\r\n                {currentPage == \"stream\" && <TwitchPage />}\r\n                {currentPage == \"outreach\" && <AwardsSlides />}\r\n                {currentPage == \"robot\" && <RobotSlides />}\r\n                {currentPage == \"cad\" && <CadViewer />}\r\n                {currentPage == \"logo\" && <LogoPage />}\r\n            </main>\r\n        </AppContext.Provider>\r\n    );\r\n}\r\n","import { red } from \"@material-ui/core/colors\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#d35401\",\r\n        },\r\n        secondary: {\r\n            main: \"#19857b\",\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n        background: {\r\n            default: \"#fff\",\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport App from \"./App\";\r\nimport theme from \"./theme\";\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <App />\r\n    </ThemeProvider>,\r\n    document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}